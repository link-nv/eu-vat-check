#! /usr/bin/env bash
# __________________________________________________________________________ #
#																			 #
#		Mvn2Eclipse -- Prepare Maven2 Artifacts for use in Eclipse.			 #
#																			 #
#																			 #
#	Licensed under the Apache License, Version 2.0 (the "License");			 #
#	you may not use this file except in compliance with the License.		 #
#	You may obtain a copy of the License at									 #
#																			 #
#		http://www.apache.org/licenses/LICENSE-2.0							 #
#																			 #
#	Unless required by applicable law or agreed to in writing, software		 #
#	distributed under the License is distributed on an "AS IS" BASIS,		 #
#	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
#	See the License for the specific language governing permissions and		 #
#	limitations under the License.											 #
# __________________________________________________________________________ #
#																			 #
#																			 #
# Copyright 2007, lhunath													 #
#	* http://lhunath.lyndir.com												 #
#	* Maarten Billemont.													 #
#																			 #
source "${0%/*}/bashlib"													 #
shopt -s nullglob
#cd "${0%/*}/.."


# Setup and parse arguments.
maven=1
binFix=1
jarFix=1
source=0
offline=
if getArgs -q :bmj "$@"; then
	maven=0
	binFix=0
	jarFix=0
fi
for arg in $(getArgs bmjosh "$@"); do
	case $arg in
		h) showHelp \
			'Maven To Eclipse' \
			"Generate the Build Path for Eclipse projects from their Maven dependency configuration." \
			'lhunath' \
			\
			''      "Without options: Run as if -b, -m and -j were given." \
			'-b'    "Symlink JKS and .properties files from the Maven target/ directory into the Eclipse build directory." \
			'-m'    "Run Maven's eclipse:eclipse goal to create eclipse project configurations from Maven's pom.xml files." \
			'-j'    "Apply eclipse classpath fixes on existing eclipse configuration." \
			'-o'    "Run Maven in offline mode; preventing it from checking for remote artifacts or javadoc/sources." \
			'-s'    "Tell Maven to attempt to download Javadoc and Source artifacts for dependencies."

			exit		;;
		b) binFix=1	    ;;
		m) maven=1		;;
		j) jarFix=1		;;
		o) offline=1	;;
		s) source=1		;;
	esac
done
shift "$(getArgs -c bmjosh "$@")"


# Run the maven2 eclipse plugin.
if (( maven )); then
	mvn -fae "$@" ${offline:+-o} ${source:+-DdownloadJavadocs=true -DdownloadSources=true} eclipse:eclipse \
		|| report "Maven eclipse plugin failed." || exit
fi


# Symlink jks and properties files from Maven's target directory into the eclipse build directory.
if (( binFix )); then
	emit "Symlinking Maven-created files into eclipse's bin directory" --
		while read d; do
			cd "$d" && {
				echo +"$d" > "$spinPipe"
				
                if [[ -d ../target/classes ]]; then
                    find ../target/classes \( -name '*.properties' -o -name '*.jks' \) \
                        -exec ln -sf {} \;
                else
                    emit -y "No classes directory for artifact: ${d%/*}"
                fi
			}
			cd - > /dev/null
        done < <(find . -type d -name eclipse)
	emit -$?
fi


# Convert any JAR references of projects into source references.
if (( jarFix )); then
	emit "Converting JAR dependencies on safe-online projects to source dependencies" --
		echo +"ejb-clients" > "$spinPipe"

        IFS=$'\n' read -d '' -r -a cps < <(find . -type f -name .classpath)
		for cp in "${cps[@]}"; do
            cp "$cp" "$cp~"
			ed -s "$cp" &>/dev/null <<-END
				H
				g/-forbidden.jar/d
				v/-client/\
				s/kind="[^"]*" path=".*\/safe-online[^"]*\/\([^"]*\)\/[^"\/]*\/[^"\/]*"/kind="src" path="\/\1"/
				wq
			END
		done

		for pp in "${cps[@]}"; do
			[[ $pp = */* ]] \
				&& echo +"${pp%/*}" > "$spinPipe" \
				|| echo +"${PWD##*/}" > "$spinPipe"

			IFS=$'\n' read -d '' -r -a srcs < <(grep -F 'kind="src"' "$pp" | cut -d'"' -f4)
			while read -r; do
				line=$REPLY

				if [[ $line = *'-client'* ]]; then
					curSrc=$(sed 's,"[^"]*/safe-online/\([^/]*\)/.*,"/\1,' <<< "$line")
					for src in "${srcs[@]}"; do
						[[ $src = $curSrc ]] && continue 2
					done

					line=$(sed '/\/safe-online\// { s,"[^"]*/safe-online[^"]*/\([^"]*\)/[^"/]*/[^"/]*","/\1",; s/kind="[^"]*"/kind="src"/; }' <<< "$line")
				fi

				echo "$line"
			done <<< "$(<"$pp")" > "$pp~"
			mv -f "$pp~" "$pp"
		done

	emit -$?
fi
