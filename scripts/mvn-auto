#!/usr/bin/env bash
# ___________________________________________________________________________ #
#                                                                             #
#       Mvn-Auto -- Build and deploy outdated Maven artifacts.                #
#                                                                             #
#                                                                             #
#    Licensed under the Apache License, Version 2.0 (the "License");          #
#    you may not use this file except in compliance with the License.         #
#    You may obtain a copy of the License at                                  #
#                                                                             #
#        http://www.apache.org/licenses/LICENSE-2.0                           #
#                                                                             #
#    Unless required by applicable law or agreed to in writing, software      #
#    distributed under the License is distributed on an "AS IS" BASIS,        #
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
#    See the License for the specific language governing permissions and      #
#    limitations under the License.                                           #
# ___________________________________________________________________________ #
#                                                                             #
#                                                                             #
# Copyright 2010, lhunath                                                     #
#   * http://www.lhunath.com                                                  #
#   * Maarten Billemont.                                                      #
#                                                                             #
source mvn-tools || exit
# TODO: Support for deleted file detection:
#       When a file is deleted from a source tree, the artifact should be
#       added to the reactor and first cleaned.
#       Support for pom artifacts:
#       POM artifacts have no target/ directory to compare mtimes against.


# Functions.
# loadModules -- invoke whenever the modules array is needed.
loadModules() {
    (( ${#modules[@]} )) && return
    local profiles

    # Build list of all modules allowed in the maven reactor.
    IFS=$'\n' read -d '' -r -a profiles < <(xpathNodes '/settings/activeProfiles/activeProfile/text()' ~/.m2/settings.xml) ||:
    emit "Enumerating modules in the Maven reactor" --
        modules=(.)
        addModules() {
            grep -qF '<module>' "$1" || return 0

            while read module; do

                moduleBase=${1%/pom.xml}
                modulePath=$moduleBase/$module
                modulePom=$modulePath/pom.xml
                [[ ! $module || ! -e $modulePom ]] && continue
                target=${modulePath#./}
                modules+=("$target")
                addModules "$modulePom"

            done < <(
                # Sub modules from the module's pom.xml's module list.
                xpathNodes '/project/modules/module/text()' "$1" ||:

                # Profile-enabled sub modules from the module's pom.xml's profiles module lists.
                grep -qF '<profile>' "$1" && {
                    for profile in "${profiles[@]}"; do
                        xpathNodes "/project/profiles/profile/id[text()='$profile']/../modules/module/text()" "$1" ||:
                    done
                }
            )
        }
        addModules ./pom.xml
    emit -$?

    #printf ' - module: %s\n' "${modules[@]}" >&2
    (( ${#modules[@]} ))
}


# Options.
while getopts :aABcCdDfn:h arg; do
    case $arg in 
        a) autoFindArtifacts=1  ;;
        A) resetArtifacts=1     ;;
        B) nobuild=1            ;;
        c) clean=1              ;;
        C) cleanAll=1           ;;
        d) distribution=$OPTARG ;;
        D) nodistribution=1     ;;
        f) force=1              ;;
        n) nodeploy=1           ;;

		h) showHelp \
			'Build and Deploy' \
			"Builds a set of artifacts and deploys the distribution on a remote host." \
			'lhunath' \
			\
			''                  "Each non-option argument is an additional artifact to include in the build." \
			''                  "See .mvntools.sample for creating a default configuration." \
            'Options'           '' \
            '-a'                "Automatically find outdated artifacts that need building." \
            '-A'                "Mark all targets under the current directory as up-to-date." \
			'-B'                "Don't Build.  Just upload and deploy the currently built distribution." \
			'-c'                "Clean the distribution before building it (eg. to rebuild its default/lib)." \
            '-C'                "Clean each artifact before building it (eg. when files were renamed/removed or to rebuild /lib)." \
			'-d distribution'   "The name in the reactor of the distribution artifact. (Default: [top dir name]-distribution)" \
            '-D'                "Do not try to build and deploy a distribution." \
            '-f'                "Force default operations, no questions asked." \
            '-n'                "Do not try to deploy the distribution after building it."

			exit		;;
    esac
done
shift $((OPTIND-1))

# Validate parameters.
distribution=${distribution:-${PWD##*/}-distribution}
[[ -e $distribution ]] || distribution=
(( nodistribution )) && distribution=

if (( resetArtifacts )); then
    emit "Resetting all targets under the current directory" --
        find . -name pom.xml -exec bash -c 'shopt -s nullglob; touch . "${1%/pom.xml}/target/"*.{[jwe]ar,zip}' -- {} \;
    emit -$?
    exit
fi

while (( ! nobuild )); do

    if (( autoFindArtifacts )); then
        loadModules || emit -r "No modules found."

        # Automatically find outdated artifacts.
        emit "Scanning for outdated artifacts"
        while read file; do
            files=("$file")
            #[[ $file = ./pom.xml ]] && files=(*/pom.xml)

            for file in "${files[@]}"; do
                target=$file
                while [[ $target = */* && ! -e $target/pom.xml ]]
                do target=${target%/*}; done
                file=${file#$target}
                target=${target#./}

                # Only consider this target if it's in the module list.
                inArray "$target" "${modules[@]}" || {
                    #echo "Ignoring: $target, not a module." >&2
                    continue
                }

                emit "Adding (Outdated)  : $bold$target$reset:$file"
                targets+=("$PWD/$target")
            done
        done < <(export -f latest
                 find . \
                    \( -type d ! \( -exec bash -c 'test -e "$1/pom.xml"' -- {} \; -o -name 'src' -o -path '*/src/*' \) -prune \) -o \
                    -name 'pom.xml' -exec bash -c '
                        shopt -s nullglob
                        ref=$(latest "${1%/pom.xml}"/target/*.{[jwe]ar,zip})
                        #printf "Candidate: %s <> %s" "$1" "$ref" >&2
                        if [[ -e $ref && $1 -nt $ref ]]; then
                            #echo ", outdated." >&2
                            echo "$1"
                        else
                            : #echo ", up-to-date." >&2
                        fi
                        :' -- {} \; -o \
                    ! -type d -path '*/src/main/*' -exec bash -c '
                        shopt -s nullglob
                        for f; do
                            [[ ${f%%/src/main/*} != ${ref%/target/*} ]] && \
                                ref=$(latest "${f%%/src/main/*}"/target/*[.]{[jwe]ar,zip})
                            if [[ ! -e $ref ]]; then
                                continue
                                #while [[ $f = */* && ! -e $f/pom.xml ]]
                                #do f=${f%/*}; done
                                #echo "$f"
                            elif [[ $f -nt $ref ]]; then
                                echo "$f"
                                #echo "outdated: $f" >&2
                            else
                                : #echo "uptodate: $f, $ref" >&2
                            fi
                        done
                        :' -- {} + | sort -u)
    fi

    # Add manually specified targets.
    opts=()
    for profile in "${profiles[@]}"; do
        opts+=("-P$profile")
    done
    for target; do
        [[ $target = -* ]] && { opts+=("$target"); continue; }

        emit "Adding (Manual)    : $bold$target"
        targets+=("$PWD/$target")
    done
    cd "$root"

    (( ! ${#targets[@]} )) && {
        if (( force )) || ! ask -y!N 'No artifacts selected for build; build anyway?'; then
            if (( nodeploy || nodistribution || force )) || ! ask -y!N 'Continue deployment with existing build?'; then
                emit "No artifacts selected for build.  Nothing to build or deploy."
                exit
            fi

            break
        fi
    }

    # Add deploy artifacts.
    if (( ! nodistribution )); then
        loadModules

        while read pom; do
            if grep -q finalName "$pom" && grep -q $'<packaging>[ \t]*ear[ \t]*</' "$pom"; then
                target=${pom%/pom.xml}; target=${target#./}

                # Only consider this target if it's in the module list.
                inArray "$target" "${modules[@]}" || continue

                emit "Adding (FinalName) : $bold$target"
                targets+=("$target")
            fi
        done < <(find . -name 'pom.xml')
    fi

    targets=("${targets[@]#$PWD/}")

    # Begin the build.
    if (( ${#targets[@]} )); then
        echo
        if inArray . "${targets[@]}"; then
            emit "Building with: mvn -npu "${opts[@]}" ${cleanAll:+clean} install"
            mvn -npu "${opts[@]}" ${cleanAll:+clean} install & mvnpid=$!
        else
            emit "Building with: mvn -pl "$(printf '%s,' "${targets[@]}")" -npu -amd "${opts[@]}" ${cleanAll:+clean} install"
            mvn -pl "$(printf '%s,' "${targets[@]}")" -npu -amd "${opts[@]}" ${cleanAll:+clean} install & mvnpid=$!
        fi
        (( clean && ! nodistribution )) && [[ -e $distribution ]] && ( sleep 10; kill -0 $mvnpid 2>/dev/null && rm -rf "$distribution/target/" ) & cleanpid=$!
        trap "kill $mvnpid $cleanpid 2>/dev/null ||:" EXIT
        wait $mvnpid
    fi

    break
done

if [[ -e $distribution ]] && (( ! nodeploy && ! nodistribution )); then
    echo

    # Find the package
    cd "$distribution/target/"
    shopt -s nullglob
    package=(*.{[jwe]ar,zip})
    shopt -u nullglob

    # Handle the package
    case $package in
        *.zip)
            emit "Unpacking distribution"
            unzip -uo "$package"
            src=("${distribution##*/}"-*/*/); src=("${src[@]%/}")

            emit "Shutting down remote distribution"
            ssh -qt ${deployToPort:+-p "$deployToPort"} "$deployToHost" "$(printf 'bash -lc %q' "$(printf 's=%q/scripts/stop; [[ -e $s ]] || exit 0; "$s"' "${deployToPath:-~}/${src%%/*}")")"

            emit "Uploading distribution to $deployTo:${deployToPath:-~}/${src%%/*}"
            ssh -qt ${deployToPort:+-p "$deployToPort"} "$deployToHost" "$(printf 'bash -lc %q' "$(printf 's=%q/scripts/stop; [[ -e $s ]] || exit 0; "$s" -w' "${deployToPath:-~}/${src%%/*}")")"
            rsync -avP --delete-after -e "ssh ${deployToPort:+-p $deployToPort}" "${src[@]}" "$deployToHost":"${deployToPath:-~}/${src%%/*}/"

            emit "(Re)Starting remote distribution"
            ssh -qt ${deployToPort:+-p "$deployToPort"} "$deployToHost" "$(printf 'bash -lc %q' "$(printf 'dist=%q; "$dist/scripts/start" -f' "${deployToPath:-~}/${src%%/*}")")"
            ;;
        *.ear|*.war)
            emit "Uploading package to $deployTo:${deployToPath:-~}/$package"
            rsync -avP --delete-after -e "ssh ${deployToPort:+-p $deployToPort}" "$package" "$deployToHost":"${deployToPath:-~}"
            ;;

        *)
            emit -R "Don't know how to handle package: $package"
            ;;
    esac
fi

# Print timestamp.
emit "Completed at $(date) after $SECONDS seconds."
